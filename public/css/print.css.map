{
	"version": 3,
	"file": "print.css",
	"sourceRoot": "C:/Users/Vince/Documents/01 - Projects/005 - Notiblog/notiblog",
	"sources": [
		"themes/zen/assets/sass/print.scss",
		"themes/zen/assets/sass/_init.scss",
		"themes/zen/assets/sass/_colors.scss",
		"themes/zen/assets/sass/_variables.scss",
		"themes/zen/assets/sass/_extra.scss",
		"themes/zen/assets/sass/mixins/breakpoint/_respond-to.scss",
		"themes/zen/assets/sass/mixins/clearfix/_clearfix.scss",
		"themes/zen/assets/sass/mixins/debug/_debug.scss",
		"themes/zen/assets/sass/mixins/flex-calc/_flex-calc.scss",
		"themes/zen/assets/sass/mixins/image-url/_image-url.scss",
		"themes/zen/assets/sass/mixins/rtl/_rtl.scss",
		"themes/zen/assets/sass/mixins/spacing/_spacing.scss",
		"themes/zen/assets/sass/components/print-none/_print-none.scss"
	],
	"sourcesContent": [
		"// stylelint-disable color-named\r\n\r\n// The print stylesheet for this theme.\r\n\r\n@import 'init';\r\n@import 'components/print-none/print-none';\r\n\r\n.pager,\r\n%pager,\r\n.mobile-nav,\r\naside,\r\nnav,\r\nfooter {\r\n  @extend %print-none;\r\n}\r\n\r\n@media print {\r\n  html {\r\n    font-size: $print-font-size;\r\n  }\r\n\r\n  html,\r\n  body,\r\n  .page {\r\n    background-color: white;\r\n    border-color: black;\r\n    box-shadow: none;\r\n    color: black;\r\n  }\r\n\r\n  .main {\r\n    width: 100%;\r\n  }\r\n\r\n  // Underline all links.\r\n  :link,\r\n  :visited {\r\n    text-decoration: underline;\r\n  }\r\n\r\n  // Add visible title after abbreviations.\r\n  abbr[title] {\r\n    &::after {\r\n      content: ' (' attr(title) ')';\r\n    }\r\n  }\r\n}\r\n",
		"// Initialization partial\r\n\r\n// To make it easier to use all variables and mixins in any Sass file in this\r\n// project, each .scss file has a `@import 'init';` declaration. The _init.scss\r\n// file is in charge of importing all the other partials needed for the\r\n// project.\r\n\r\n// Colours and variables.\r\n@import 'colors';\r\n@import 'variables';\r\n@import 'extra';\r\n\r\n// Mixins and functions.\r\n@import 'mixins/breakpoint/respond-to';\r\n@import 'mixins/clearfix/clearfix';\r\n@import 'mixins/debug/debug';\r\n@import 'mixins/flex-calc/flex-calc';\r\n@import 'mixins/image-url/image-url';\r\n@import 'mixins/rtl/rtl';\r\n@import 'mixins/spacing/spacing';\r\n",
		"// stylelint-disable color-no-hex, color-named, value-list-max-empty-lines\r\n// stylelint-disable scss/dollar-variable-colon-space-after, scss/dollar-variable-empty-line-before\r\n\r\n// Base colors.\r\n$black:                 #000;\r\n$nearblack:             lighten($black, 20%); // #333\r\n$grey-dark:             lighten($black, 40%); // #666\r\n$grey:                  lighten($black, 60%); // #999\r\n$grey-light:            lighten($black, 80%); // #ccc\r\n$grey-extra-light:      lighten($black, 93.33%); // #eee\r\n$nearwhite:             lighten($black, 97%); // #f7f7f7\r\n$white:                 #fff;\r\n\r\n$blue:                  #0072b9;\r\n$red:                   #c00;\r\n$green:                 #43a808;\r\n$yellow:                #fd0;\r\n\r\n$brand:                 $nearblack;\r\n$brand-alt:             $grey;\r\n$brand-light:           $grey-light;\r\n$brand-dark:            $grey-dark;\r\n\r\n// Colour map.\r\n$colors: (\r\n  brand:                  $brand,\r\n  brand-alt:              $brand-alt,\r\n  brand-light:            $brand-light,\r\n  brand-dark:             $brand-dark,\r\n\r\n  text:                   $black,\r\n  text-bg:                $white,\r\n  text-meta:              $grey-dark,\r\n\r\n  link:                   $brand,\r\n  link-visited:           $brand,\r\n  link-hover:             $brand-alt,\r\n  link-active:            $red,\r\n\r\n  link-inverted:          $white,\r\n  link-visited-inverted:  $white,\r\n  link-hover-inverted:    $white,\r\n  link-active-inverted:   $red,\r\n\r\n  border:                 $brand,\r\n  border-light:           $brand-light,\r\n  border-dark:            $brand-dark,\r\n\r\n  autocomplete:           $black,\r\n  autocomplete-bg:        $white,\r\n  autocomplete-select:    $white,\r\n  autocomplete-select-bg: $blue,\r\n\r\n  body-bg:                $white,\r\n  header-bg:              $white,\r\n  footer-bg:              $white,\r\n  backdrop:               $grey-extra-light,\r\n\r\n  mobile-menu:            $brand,\r\n  mobile-menu-cover:      rgba($black, .2),\r\n\r\n  button:                 $brand,\r\n  button-hover:           $brand-alt,\r\n  button-text:            $white,\r\n  button-text-hover:      $white,\r\n  button-disabled:        $grey,\r\n\r\n  mark-highlight:         $red,\r\n  mark-bg:                $yellow,\r\n\r\n  menu-active:            $black,\r\n\r\n  preview-bg:             lighten($yellow, 43%),\r\n\r\n  row-header:             transparent,\r\n  row-odd:                $nearwhite,\r\n  row-even:               transparent,\r\n\r\n  status:                 $green,\r\n  status-bg:              lighten($green, 62%),\r\n  warning:                $black,\r\n  warning-bg:             lighten($yellow, 45%),\r\n  warning-border:         $yellow,\r\n  error:                  $red,\r\n  error-bg:               lighten($red, 57%),\r\n\r\n  watermark:              $grey-extra-light,\r\n\r\n  headings:               $nearblack,\r\n\r\n  code:                   $nearblack,\r\n\r\n  highlight:              $brand-alt,\r\n);\r\n",
		"// stylelint-disable max-line-length, number-leading-zero, number-no-trailing-zeros\r\n// stylelint-disable scss/dollar-variable-colon-space-after, value-keyword-case\r\n\r\n// Variables\r\n\r\n// Font faces, stacks and sizes.\r\n\r\n// The font size set on the root html element.\r\n// Specify unitless, it will be recalculated as %.\r\n$base-font-size:      18;\r\n\r\n// Base and heading line height, unitless.\r\n$base-line-height:    1.5;\r\n$heading-line-height: 1.3;\r\n\r\n// The pt font-size to be used for printing.\r\n$print-font-size:     12pt;\r\n\r\n// The font sizes in our type hierarchy as tee shirt sizes.\r\n// Size m is base.\r\n// Use like this: var(--fs-m)\r\n$font-size-fixed: (\r\n  xxxxl:      3rem,\r\n  xxxl:       2.5rem,\r\n  xxl:        2rem,\r\n  xl:         1.5rem,\r\n  l:          1.25rem,\r\n  m:          1rem,\r\n  s:          0.889rem,\r\n  xs:         0.778rem,\r\n);\r\n\r\n// The responsive font sizes in our type hierarchy as tee shirt sizes.\r\n// Size m is base.\r\n// Use like this: var(--fs-m)\r\n$font-size-fluid: (\r\n  xxxxl:      clamp(2.4881rem, calc(1.8896rem + 2.9924vw), 4.2088rem),\r\n  xxxl:       clamp(2.0738rem, calc(1.6968rem + 1.8848vw), 3.1575rem),\r\n  xxl:        clamp(1.7281rem, calc(1.5053rem + 1.1141vw), 2.3688rem),\r\n  xl:         clamp(1.44rem, calc(1.3228rem + 0.5859vw), 1.7769rem),\r\n  l:          clamp(1.2rem, calc(1.1537rem + 0.2315vw), 1.3331rem),\r\n  m:          1rem,\r\n  s:          0.889rem,\r\n  xs:         0.778rem,\r\n);\r\n\r\n// Set the font sizes to use, fixed or fluid.\r\n$font-size: $font-size-fixed;\r\n// $font-size: $font-size-fluid;\r\n\r\n// Font weights.\r\n// Use like this: var(--fw-normal)\r\n$font-weight: (\r\n  headings:   700,\r\n  bolder:     900,\r\n  bold:       700,\r\n  medium:     500,\r\n  normal:     400,\r\n  light:      300,\r\n  lighter:    200,\r\n);\r\n\r\n// Modern font stacks. See how they look at https://modernfontstacks.com/.\r\n//\r\n// The following font family declarations use widely available fonts.\r\n// A user's web browser will look at the comma-separated list and will\r\n// attempt to use each font in turn until it finds one that is available\r\n// on the user's computer. The final \"generic\" font (sans-serif, serif or\r\n// monospace) hints at what type of font to use if the web browser doesn't\r\n// find any of the fonts in the list.\r\n\r\n// Emojis font stack. Add to end of other stacks when needed.\r\n$emojis:           'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji';\r\n\r\n// System-ui font stack.\r\n$system-ui:       system-ui, sans-serif;\r\n\r\n// Serif font stacks.\r\n$ui-serif:        ui-serif, Charter, 'Bitstream Charter', 'Sitka Text', Cambria, serif;\r\n$transitional:    Charter, 'Bitstream Charter', 'Sitka Text', Cambria, serif;\r\n$old:             'Iowan Old Style', 'Palatino Linotype', 'URW Palladio L', P052, serif;\r\n$slab:            Rockwell, 'Rockwell Nova', 'Roboto Slab', 'DejaVu Serif', 'Sitka Small', serif;\r\n$antique:         Superclarendon, 'Bookman Old Style', 'URW Bookman', 'URW Bookman L', 'Georgia Pro', Georgia, serif;\r\n$didone:          Didot, 'Bodoni MT', 'Noto Serif Display', 'URW Palladio L', P052, Sylfaen, serif;\r\n\r\n// Sans-serif font stacks.\r\n$ui-sans-serif:   ui-sans-serif, system-ui, sans-serif;\r\n$humanist:        Seravek, 'Gill Sans Nova', Ubuntu, Calibri, 'DejaVu Sans', source-sans-pro, sans-serif;\r\n$geometric:       Avenir, Montserrat, Corbel, 'URW Gothic', source-sans-pro, sans-serif;\r\n$classical:       Optima, Candara, 'Noto Sans', source-sans-pro, sans-serif;\r\n$neo:             Inter, Roboto, 'Helvetica Neue', 'Arial Nova', 'Nimbus Sans', Arial, sans-serif;\r\n$industrial:      Bahnschrift, 'DIN Alternate', 'Franklin Gothic Medium', 'Nimbus Sans Narrow', sans-serif-condensed, sans-serif;\r\n$futura:          Futura, Montserrat, Corbel, 'URW Gothic', source-sans-pro, sans-serif;\r\n\r\n// Rounded Sans-serif font stacks.\r\n$ui-rounded:         ui-rounded, 'Hiragino Maru Gothic ProN', Quicksand, Comfortaa, Manjari, 'Arial Rounded MT', 'Arial Rounded MT Bold', Calibri, source-sans-pro, sans-serif;\r\n\r\n// Monospace font stacks.\r\n$ui-monospace:    ui-monospace, 'Cascadia Code', 'Source Code Pro', Menlo, Consolas, 'DejaVu Sans Mono', monospace;\r\n\r\n// Font family.\r\n// Use like this: var(--ff-body)\r\n$font-family: (\r\n  body:       $ui-serif,\r\n  headings:   $ui-sans-serif,\r\n  alt:        $system-ui,\r\n  monospace:  $ui-monospace,\r\n);\r\n\r\n// Breakpoints\r\n// Use the `respond-to(s)` mixin to use named breakpoints.\r\n$breakpoints: (\r\n  'xxxl':     1222px,\r\n  'xxl':      1111px,\r\n  'xl':       999px,\r\n  'l':        888px,\r\n  'm':        777px,\r\n  's':        666px,\r\n  'xs':       555px,\r\n  'xxs':      444px,\r\n  'xxxs':     333px,\r\n);\r\n\r\n// Border radius.\r\n// Use like this: var(--radius-m)\r\n$border-radius: (\r\n  xl:         1rem,\r\n  l:          0.75rem,\r\n  m:          0.5rem,\r\n  s:          0.3rem,\r\n  xs:         0.125rem,\r\n);\r\n\r\n// Spacing\r\n// Generates mt-m (mt = margin-top), mb-m (mb = margin-bottom) and\r\n// mtb-m (mtb = margin-block) classes.\r\n$spacing: (\r\n  xxl:        3,\r\n  xl:         2,\r\n  l:          1.5,\r\n  m:          1,\r\n  s:          0.75,\r\n  xs:         0.5,\r\n  xxs:        0.3,\r\n  0:          0,\r\n);\r\n\r\n// The max content width. (Consider using one of the breakpoints.)\r\n$max-content-width:   1111px;\r\n\r\n// The max page width. Defaults to max-content-width.\r\n// Setting this to a larger value than max-content-width allows\r\n// content with class \"stretch\" to stretch out to the page edge.\r\n// $max-page-width:      1111px;\r\n\r\n// The max line width for readability.\r\n$max-line-width:      70ch;\r\n\r\n// The left/right gutter/padding.\r\n// Use like this: var(--gutters)\r\n$gutters:             calc(5px + 1.5625vw);\r\n$gutters-reverse:     calc(0px - (5px + 1.5625vw));\r\n\r\n// Breakout amount.\r\n// How much should the \"breakout\" be. Defaults to gutters value.\r\n// $breakout:             calc(5px + 1.5625vw);\r\n\r\n// The amount lists, blockquotes and comments are indented.\r\n// Use like this: var(--indent-amount)\r\n$indent-amount:       2rem;\r\n\r\n// Control whether RTL styles are added.\r\n$include-rtl: false;\r\n\r\n// Show horizontal grid to help with debugging typography.\r\n$debug: false;\r\n$debug-color: $grey-extra-light;\r\n",
		"// Add and override variables. This file loads last during init.\r\n",
		"@mixin respond-to($breakpoint) {\r\n  // If the key exists in the map\r\n  @if map-has-key($breakpoints, $breakpoint) {\r\n    // Prints a media query based on the value\r\n    @media (min-width: map-get($breakpoints, $breakpoint)) {\r\n      @content;\r\n    }\r\n  } @else {\r\n    @media (min-width: $breakpoint) {\r\n      @content;\r\n    }\r\n  }\r\n}\r\n\r\n@mixin respond-to-max($breakpoint) {\r\n  // If the key exists in the map\r\n  @if map-has-key($breakpoints, $breakpoint) {\r\n    // Prints a media query based on the value\r\n    @media (max-width: map-get($breakpoints, $breakpoint)) {\r\n      @content;\r\n    }\r\n  } @else {\r\n    @media (max-width: $breakpoint) {\r\n      @content;\r\n    }\r\n  }\r\n}\r\n",
		"// clearfix()\r\n//\r\n// Allows the bottom of an element to extend to the bottom of all floated\r\n// children elements. @see http://nicolasgallagher.com/micro-clearfix-hack/\r\n//\r\n// We use the micro-clearfix, optimized for use in `@extend` where fewer `&` is\r\n// better.\r\n@mixin clearfix() {\r\n  &::before {\r\n    content: '';\r\n    display: table;\r\n  }\r\n\r\n  &::after {\r\n    content: '';\r\n    display: table;\r\n    clear: both;\r\n  }\r\n}\r\n",
		"// Output a horizontal grid to help with debugging typography.\r\n@mixin debug-grid() {\r\n  @if $debug == true {\r\n    $grid-height: #{$base-line-height + 'rem'};\r\n\r\n    position: relative;\r\n    // stylelint-disable-next-line  max-line-length\r\n    background-image: repeating-linear-gradient(180deg, $debug-color, $debug-color 1px, transparent 1px, transparent $grid-height);\r\n\r\n    &::after {\r\n      content: '';\r\n      position: absolute;\r\n      bottom: -1px;\r\n      left: 0;\r\n      height: 1px;\r\n      width: 100%;\r\n      background-color: $debug-color;\r\n    }\r\n  }\r\n}\r\n",
		"@mixin flex($col, $gap) {\r\n  flex-basis: calc(100% / #{$col} - #{$gap * $base-line-height + 'rem'});\r\n}\r\n",
		"// stylelint-disable function-url-quotes\r\n\r\n// The relative path from the css directory to the sass directory.\r\n$image-url-path-to-source: '../sass' !default;\r\n// The relative path from the root sass directory to where your components usually lie.\r\n$image-url-subdirectory: 'components' !default;\r\n\r\n// image-url()\r\n//\r\n// If you include your images next to your component Sass files, you need to\r\n// specify a url() to point from the generated CSS to the Sass source like this:\r\n//\r\n// ```css\r\n// content: url(../sass/components/is-quite/long.svg);\r\n// ```\r\n//\r\n// With the `image-url()` function the path to all your components is assumed to\r\n// start with `../sass/components/` and you just need to give it the last, short\r\n// bit of the path in your Sass code like this:\r\n//\r\n// ```scss\r\n// content: image-url(is-quite/short.svg);\r\n// ```\r\n//\r\n// If you want to point at an image that is not in the components sub-directory\r\n// of your sass directory, you can override the default $subdirectory by\r\n// passing it in as the first parameter of `image-url()` like this:\r\n//\r\n// ```scss\r\n// content: image-url(base, grouping/blockquote.svg);\r\n// ```\r\n//\r\n// which would output `url(../sass/base/grouping/blockquote.svg)`.\r\n//\r\n// $subdirectory   = $image-url-subdirectory - Optional. The relative path from\r\n//                   the root of your Sass source to the sub-directory where\r\n//                   components usually lie.\r\n// $path           - Required. The path to the image relative to the\r\n//                   `$subdirectory`.\r\n// $path-to-source = $image-url-path-to-source - Optional. The relative path\r\n//                   from the css build directory to the sass source directory.\r\n@function image-url($subdirectory, $path: null, $path-to-source: $image-url-path-to-source) {\r\n  // If only 1 parameter is given, its value is intended for the $path.\r\n  @if type-of($path) == 'null' {\r\n    $path: $subdirectory;\r\n    $subdirectory: $image-url-subdirectory;\r\n  }\r\n\r\n  @return url(unquote($path-to-source + '/' + $subdirectory + '/' + $path));\r\n}\r\n",
		"// stylelint-disable scss/at-if-closing-brace-newline-after, scss/at-if-closing-brace-space-after\r\n\r\n$include-rtl: true !default;\r\n\r\n// rtl()\r\n//\r\n// Includes Right-To-Left language support by adding a selector of\r\n// `[dir=\"rtl\"]`.\r\n//\r\n// Can be turned off globally by setting `$include-rtl: false;`.\r\n//\r\n// $selector = ':dir(rtl)' - The RTL selector.\r\n@mixin rtl($selector: ':dir(rtl)') {\r\n  @if $include-rtl {\r\n    @if & {\r\n      &#{$selector} {\r\n        @content;\r\n      }\r\n    }\r\n    @else {\r\n      #{$selector} {\r\n        @content;\r\n      }\r\n    }\r\n  }\r\n}\r\n",
		"@mixin spacing($property, $spacing, $unit) {\r\n  $converted-list: ();\r\n\r\n  @each $x in $spacing {\r\n    $xunit: $unit;\r\n\r\n    @if $x == 0 {\r\n      $xunit: '';\r\n    }\r\n\r\n    $spacing: #{$x * $base-line-height + $xunit};\r\n    $converted-list: join($converted-list, $spacing, $separator: space);\r\n  }\r\n\r\n  #{$property}: $converted-list;\r\n}\r\n\r\n@mixin gap($x, $unit: 'rem') {\r\n  @include spacing(gap, $x, $unit);\r\n}\r\n\r\n@mixin margin($x, $unit: 'rem') {\r\n  @include spacing(margin, $x, $unit);\r\n}\r\n\r\n@mixin margin-inline($x, $unit: 'rem') {\r\n  @include spacing(margin-inline, $x, $unit);\r\n}\r\n\r\n@mixin margin-inline-start($x, $unit: 'rem') {\r\n  @include spacing(margin-inline-start, $x, $unit);\r\n}\r\n\r\n@mixin margin-inline-end($x, $unit: 'rem') {\r\n  @include spacing(margin-inline-end, $x, $unit);\r\n}\r\n\r\n@mixin margin-block($x, $unit: 'rem') {\r\n  @include spacing(margin-block, $x, $unit);\r\n}\r\n\r\n@mixin margin-block-start($x, $unit: 'rem') {\r\n  @include spacing(margin-block-start, $x, $unit);\r\n}\r\n\r\n@mixin margin-block-end($x, $unit: 'rem') {\r\n  @include spacing(margin-block-end, $x, $unit);\r\n}\r\n\r\n@mixin margin-top($x, $unit: 'rem') {\r\n  @include spacing(margin-top, $x, $unit);\r\n}\r\n\r\n@mixin margin-bottom($x, $unit: 'rem') {\r\n  @include spacing(margin-bottom, $x, $unit);\r\n}\r\n\r\n@mixin margin-left($x, $unit: 'rem') {\r\n  @include spacing(margin-left, $x, $unit);\r\n}\r\n\r\n@mixin margin-right($x, $unit: 'rem') {\r\n  @include spacing(margin-right, $x, $unit);\r\n}\r\n\r\n@mixin padding($x, $unit: 'rem') {\r\n  @include spacing(padding, $x, $unit);\r\n}\r\n\r\n@mixin padding-inline($x, $unit: 'rem') {\r\n  @include spacing(padding-inline, $x, $unit);\r\n}\r\n\r\n@mixin padding-inline-start($x, $unit: 'rem') {\r\n  @include spacing(padding-inline-start, $x, $unit);\r\n}\r\n\r\n@mixin padding-inline-end($x, $unit: 'rem') {\r\n  @include spacing(padding-inline-end, $x, $unit);\r\n}\r\n\r\n@mixin padding-block($x, $unit: 'rem') {\r\n  @include spacing(padding-block, $x, $unit);\r\n}\r\n\r\n@mixin padding-block-start($x, $unit: 'rem') {\r\n  @include spacing(padding-block-start, $x, $unit);\r\n}\r\n\r\n@mixin padding-block-end($x, $unit: 'rem') {\r\n  @include spacing(padding-block-end, $x, $unit);\r\n}\r\n\r\n@mixin padding-top($x, $unit: 'rem') {\r\n  @include spacing(padding-top, $x, $unit);\r\n}\r\n\r\n@mixin padding-bottom($x, $unit: 'rem') {\r\n  @include spacing(padding-bottom, $x, $unit);\r\n}\r\n\r\n@mixin padding-left($x, $unit: 'rem') {\r\n  @include spacing(padding-left, $x, $unit);\r\n}\r\n\r\n@mixin padding-right($x, $unit: 'rem') {\r\n  @include spacing(padding-right, $x, $unit);\r\n}\r\n",
		"// Do not print\r\n//\r\n// Removes an element from the print version of the web site.\r\n//\r\n// By importing these CSS rules in a file marked as media \"all\", we allow these\r\n// print rules to be aggregated with other stylesheets, for improved front-end\r\n// performance.\r\n\r\n.print-none,\r\n%print-none {\r\n  @media print {\r\n    display: none;\r\n  }\r\n}\r\n"
	],
	"names": [],
	"mappings": "AYUE,MAAM,MAFR;EAAA,AAAA,WAAW;EZDX,MAAM;EAEN,WAAW;EACX,KAAK;EACL,GAAG;EACH,MAAM,CYHM;IAER,OAAO,EAAE,IAAI,GAEhB,EAAA;;AZGD,MAAM,MACJ;EAAA,AAAA,IAAI,CAAC;IACH,SAAS,EGFS,IAAI,GHGvB;EAED,AAAA,IAAI;EACJ,IAAI;EACJ,KAAK,CAAC;IACJ,gBAAgB,EAAE,KAAK;IACvB,YAAY,EAAE,KAAK;IACnB,UAAU,EAAE,IAAI;IAChB,KAAK,EAAE,KAAK,GACb;EAED,AAAA,KAAK,CAAC;IACJ,KAAK,EAAE,IAAI,GACZ;GAGA,AAAD,IAAK;GACJ,OAAO,CAAC;IACP,eAAe,EAAE,SAAS,GAC3B;EAGD,AACE,IADE,CAAA,AAAA,KAAC,AAAA,GACA,KAAK,CAAC;IACP,OAAO,EAAE,IAAI,CAAC,WAAW,CAAC,GAAG,GAC9B,EAzBF"
}